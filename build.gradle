group 'ch.ehi'
version '1.16.3'+System.getProperty('release','-SNAPSHOT')

apply plugin: "java"
apply plugin: "maven"

configurations {
    deployerJars
}

if(!JavaVersion.current().isJava8()){
  compileJava.options.compilerArgs.addAll(['--release', '6'])
}else{
  sourceCompatibility = JavaVersion.VERSION_1_6 
  targetCompatibility = JavaVersion.VERSION_1_6
}
compileJava.options.encoding = 'US-ASCII'

// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    //resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

dependencies {
    compile group: 'ch.ehi', name: 'ehibasics', version: '1.4.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
	testRuntime group: 'org.postgresql', name: 'postgresql', version: '42.1.4.jre6'
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.0.0"
}

repositories {
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
        //url "https://jars.sogeo.services/interlis"
    }
    mavenCentral()
}

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def dburl = System.getProperty('dburl',properties.get('dburl'))
def dbusr = System.getProperty('dbusr',properties.get('dbusr'))
def dbpwd = System.getProperty('dbpwd',properties.get('dbpwd'))
    
def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceSets {
  main {
    //let's register an output folder on the main SourceSet:
    //it is now a part of the 'main' classpath and will be a part of the jar
    output.dir(generatedResources, builtBy: 'generateMyResources')
    java {
    	srcDirs=['src']
    }
  }
  test {
  	  java {
  	  	  srcDirs=['test']
  	  }
  }
}

task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/ehi/sqlgen/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}

test {
	// when Gradle forks a new Java process, it does not automatically pass the 
	// environment variable values along to the new environment. One has to 
	// explicitly pass these variables
	systemProperty 'dburl', dburl
	systemProperty 'dbusr', dbusr
	systemProperty 'dbpwd', dbpwd
    testLogging.exceptionFormat = 'full'
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: 'ftp://ftp.interlis.ch'){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}
